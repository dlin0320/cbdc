import io.cryptoblk.builds.Utils

buildscript { //properties that you need to build the project

    Properties constants = new Properties()
    file("$projectDir/./constants.properties").withInputStream { constants.load(it) }

    ext {
        corda_release_group = constants.getProperty("cordaReleaseGroup")
        corda_core_release_group =  constants.getProperty("cordaCoreReleaseGroup")
        corda_release_version = constants.getProperty("cordaVersion")
        corda_core_release_version = constants.getProperty("cordaCoreVersion")
        corda_gradle_plugins_version = constants.getProperty("gradlePluginsVersion")
        kotlin_version = constants.getProperty("kotlinVersion")
        junit_version = constants.getProperty("junitVersion")
        quasar_version = constants.getProperty("quasarVersion")
        log4j_version = constants.getProperty("log4jVersion")
        slf4j_version = constants.getProperty("slf4jVersion")
        corda_platform_version = constants.getProperty("platformVersion").toInteger()
        spring_boot_version = '2.2.5.RELEASE'
        spring_version = '5.2.4.RELEASE'
        spring_cloud_version = 'Hoxton.SR8'
        jackson_version = '2.12.3'
        ktlint_version = '10.0.0'
    }

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url 'https://plugins.gradle.org/m2/' }
        maven { url 'https://software.r3.com/artifactory/corda-releases/' }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "net.corda.plugins:cordapp:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:cordformation:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:quasar-utils:$corda_gradle_plugins_version"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$spring_boot_version"
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlin_version"
        classpath "org.jlleitschuh.gradle:ktlint-gradle:$ktlint_version"
        classpath 'io.cryptoblk.builds:hamster:0.20'
    }
}

allprojects { //Properties that you need to compile your project (The application)
    group 'io.cryptoblk.cbdctw'
    version (Utils.getVersionFromTag(rootProject) ?: '1.0.0-SNAPSHOT')

    apply from: "${rootProject.projectDir}/repositories.gradle"
    apply plugin: 'kotlin'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'io.cryptoblk.builds.hamster'
    apply plugin: 'org.jlleitschuh.gradle.ktlint'

    hamster {
        frontendOnlyPublish = project.hasProperty('frontendOnlyPublish')
        setupRepos()
        setupOwasp()
        setupKtlint()
        setupDetekt()
        publishThis()
        setupDependencyManagement()
        setupLanguageVersions()
        //setupFindSecBugs()
    }

    test {
        // requires recent gradle like 4.8.1
        useJUnitPlatform {}
        testLogging {
            events "passed", "skipped", "failed"
        }
    }

    repositories {
        mavenLocal()
        jcenter()
        mavenCentral()
        maven { url 'https://software.r3.com/artifactory/corda' }
        maven { url 'https://jitpack.io' }
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile) {
        kotlinOptions {
            languageVersion = "1.2"
            apiVersion = "1.2"
            jvmTarget = "1.8"
            javaParameters = true   // Useful for reflection.
        }
    }

    jar {
        // This makes the JAR's SHA-256 hash repeatable.
        preserveFileTimestamps = false
        reproducibleFileOrder = true
    }

    dependencyManagement {
        dependencies {
            dependencySet(group: 'org.junit.jupiter', version: junit_version) {
                entry 'junit-jupiter-engine'
                entry 'junit-jupiter-api'
                entry 'junit-jupiter-params'
                entry 'junit-jupiter-migrationsupport'
            }
            dependencySet(group: 'org.junit.platform', version: '1.5.2') {
                entry 'junit-platform-commons'
                entry 'junit-platform-console'
                entry 'junit-platform-engine'
                entry 'junit-platform-launcher'
                entry 'junit-platform-runner'
                entry 'junit-platform-suite-api'
                entry 'junit-platform-surefire-provider'
            }
            dependency "org.junit.vintage:junit-vintage-engine:$junit_version"
        }
        dependencies {
            dependencySet(group: 'org.springframework.boot', version: spring_boot_version) {
               entry 'spring-boot-starter-web'
               entry 'spring-boot-starter-security'
               entry 'spring-boot-starter-jetty'
            }
        }
        dependencies {
            dependencySet(group: 'org.apache.logging.log4j', version: log4j_version) {
                entry "log4j-slf4j-impl"
                entry "log4j-web"
                entry "log4j-core"
            }
        }
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:$spring_cloud_version"
        }
    }

    configurations {
        all {
            exclude group: 'org.springframework.boot', module: "spring-boot-starter-tomcat"
            exclude group: 'org.springframework.boot', module: "spring-boot-starter-logging"
            exclude group: 'org.slf4j', module: 'slf4j-log4j12'
            exclude group: 'ch.qos.logback', module: 'logback-classic'
            exclude group: 'org.junit', module: 'junit'
        }

        // Liquibase needs the logback-classic module, so we remove it from the exclusion
        liquibaseRuntime.excludeRules = liquibaseRuntime.excludeRules.findAll { it.group != 'ch.qos.logback' }
    }
}




apply plugin: 'net.corda.plugins.cordapp'
apply plugin: 'net.corda.plugins.cordformation'
apply plugin: 'net.corda.plugins.quasar-utils'

sourceSets {
    main {
        resources {
            srcDir rootProject.file("config/dev")
        }
    }
}

//Module dependencis
dependencies {
    // Corda dependencies.
    cordaCompile "$corda_core_release_group:corda-core:$corda_core_release_version"
    cordaRuntime "$corda_release_group:corda-node-api:$corda_release_version"
    cordaRuntime "$corda_release_group:corda:$corda_release_version"

    // CorDapp dependencies.
    cordapp project(":cbdc-flow")
    cordapp project(":cbdc-contract")

    cordaCompile "org.apache.logging.log4j:log4j-slf4j-impl:${log4j_version}"
    cordaCompile "org.apache.logging.log4j:log4j-web:${log4j_version}"
    cordaCompile "org.slf4j:jul-to-slf4j:$slf4j_version"
}


//Task to build the jar for ganache.
task ganache {
    subprojects {
        if (it.project.name != "clients") {
            dependsOn jar
            doLast {
                copy {
                    from "${buildDir}/libs"
                    into "${rootDir}/build/libs"
                }
            }
        }
    }
}



//Task to deploy the nodes in order to bootstrap a network
task deployNodes(type: net.corda.plugins.Cordform, dependsOn: ['jar']) {

    /* This property will load the CorDapps to each of the node by default, including the Notary. You can find them
     * in the cordapps folder of the node at build/nodes/Notary/cordapps. However, the notary doesn't really understand
     * the notion of cordapps. In production, Notary does not need cordapps as well. This is just a short cut to load
     * the Corda network bootstrapper.
     */
    nodeDefaults {
        projectCordapp {
            deploy = false
        }
        cordapp project(':cbdc-flow')
        cordapp project(':cbdc-contract')
        runSchemaMigration = true //This configuration is for any CorDapps with custom schema, We will leave this as true to avoid
        //problems for developers who are not familiar with Corda. If you are not using custom schemas, you can change
        //it to false for quicker project compiling time.
    }
    node {
        name "O=Notary,L=London,C=GB"
        notary = [validating : false]
        p2pPort 10000
        rpcSettings {
            address("localhost:10020")
            adminAddress("localhost:10030")
        }
    }
    node {
        name "O=PartyA,L=London,C=GB"
        p2pPort 10001
        rpcSettings {
            address("localhost:10021")
            adminAddress("localhost:10031")
        }
        rpcUsers = [[ user: "user1", "password": "test", "permissions": ["ALL"]]]
    }
    node {
        name "O=PartyB,L=New York,C=US"
        p2pPort 10002
        rpcSettings {
            address("localhost:10022")
            adminAddress("localhost:10032")
        }
        rpcUsers = [[ user: "user1", "password": "test", "permissions": ["ALL"]]]
    }
    node {
        name "O=PartyC,L=Tokyo,C=JP"
        p2pPort 10003
        rpcSettings {
            address("localhost:10023")
            adminAddress("localhost:10033")
        }
        rpcUsers = [[ user: "user1", "password": "test", "permissions": ["ALL"]]]
    }
}
